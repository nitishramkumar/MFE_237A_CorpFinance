stock.ExcessReturns <- data.table(nrows=length(stock.Returns$DATE),ncols=2)
stock.ExcessReturns
stock.ExcessReturns <- data.table(nrow=length(stock.Returns$DATE),ncol=2)
stock.ExcessReturns
returnRowsNum <- length(stock.Returns$DATE)
returnRowsNum
stock.ExcessReturns <- data.table(DATE=as.Date(rep(NA,returnRowsNum)),RET=as.numeric(rep(NA,returnRowsNum)))
dim(stock.ExcessReturns)
stock.Returns[1,"DATE"]
sp500return <- stocks.sp500returns[stocks.sp500returns$caldt == stock.Returns[1,"DATE"],]
sp500return
stock.Returns[1,"RET"]
stockExcessReturns
stock.ExcessReturns[1,"RET"] <- stockExcessReturns
stock.ExcessReturns[1,"RET"]
stock.ExcessReturns
library(data.table)
returnRowsNum <- length(stock.Returns$DATE)
stock.ExcessReturns <-data.table(DATE=as.Date(rep(NA,returnRowsNum)),RET=as.numeric(rep(NA,returnRowsNum)))
colnames(stock.ExcessReturns) <- c("DATE","RET")
for(i in 1:returnRowsNum){
sp500return <- stocks.sp500returns[stocks.sp500returns$caldt == stock.Returns[i,"DATE"],]
stockExcessReturns <- stock.Returns[i,"RET"] - sp500return$vwretd
stock.ExcessReturns[i,"RET"] <- stockExcessReturns
stock.ExcessReturns[i,"DATE"] <- stock.Returns[i,"DATE"]
}
sql.stockReturns <- paste0("SELECT permno,date,ret,(ret-vwretd) AS excessRet
FROM CRSPQ.DSF dsf
INNER JOIN CRSPQ.DSP500 sp
ON dsf.date = sp.caldt
WHERE date between '",format(date.StartPeriod,"%d%b%Y"),"'d                             AND '",format(date.EndPeriod,"%d%b%Y"),"'d AND permno IN                               (",paste0(stock.dividendEvents$PERMNO,collapse = ","),")")
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
date.eventYear <- 2012
sql.stockDividendEvents <- paste0("SELECT permno,divamt,dclrdt,exdt,rcrddt,paydt FROM CRSPQ.DSEDIST WHERE year(paydt) = ",date.eventYear)
stock.dividendEvents <- getData(sql.stockDividendEvents)
stock.dividendEvents$DCLRDT <- as.Date(stock.dividendEvents$DCLRDT)
stock.dividendEvents$EXDT <- as.Date(stock.dividendEvents$EXDT)
stock.dividendEvents$RCRDDT <- as.Date(stock.dividendEvents$RCRDDT)
stock.dividendEvents$PAYDT <- as.Date(stock.dividendEvents$PAYDT)
date.StartPeriod <- as.Date(min(stock.dividendEvents$PAYDT)) - 20
date.EndPeriod <- as.Date(max(stock.dividendEvents$PAYDT)) + 20
sql.stockReturns <- paste0("SELECT permno,date,ret,(ret-vwretd) AS excessRet
FROM CRSPQ.DSF dsf
INNER JOIN CRSPQ.DSP500 sp
ON dsf.date = sp.caldt
WHERE date between '",format(date.StartPeriod,"%d%b%Y"),"'d                             AND '",format(date.EndPeriod,"%d%b%Y"),"'d AND permno IN                               (",paste0(stock.dividendEvents$PERMNO,collapse = ","),")")
sql.stockReturns
sql.stockReturns <- paste0("SELECT permno,date,ret,(ret-vwretd) AS excessRet FROM CRSPQ.DSF dsf INNER JOIN CRSPQ.DSP500 sp ON dsf.date = sp.caldt WHERE date between '",format(date.StartPeriod,"%d%b%Y"),"'d AND '",format(date.EndPeriod,"%d%b%Y"),"'d AND permno IN (",paste0(stock.dividendEvents$PERMNO,collapse = ","),")")
sql.stockReturns
stock.Returns <- getData(sql.stockReturns)
stock.Returns$DATE <- as.Date(stock.Returns$DATE)
stock.Returns[1,]
stock.Returns[2,]
sql.sp500returns <- paste0("SELECT caldt,vwretd FROM CRSPQ.DSP500 WHERE caldt between '", format(date.StartPeriod,"%d%b%Y"),"'d AND '",format(date.EndPeriod,"%d%b%Y"),"'d")
stocks.sp500returns <- getData(sql.sp500returns)
stocks.sp500returns$caldt <- as.Date(stocks.sp500returns$caldt)
stocks.sp500returns[2,]
stock.Returns[2,]
stocks.sp500returns[1,]
-0.01554404 + 0.01488377
stock.Returns[12,]
stocks.sp500returns[2,]
stock.Returns[22,]
stock.Returns[82,]
stock.Returns[100,]
stock.Returns[5000,]
stocks.sp500returns[2,]
-0.001248204 + 0.008640659
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
for(count in -20:20){
selectedStocksData <- stock.Returns[stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count),]
selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"excessRet"),]
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStocksDataRet$"excessRet"))
}
stock.meanEventBasedReturns
plot(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2],xlab="Relative days from dividend payment",ylab="Daily returns",main = "Change in excess returns based on dividend distribution")
lines(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2])
acf(stock.meanEventBasedReturns)
plot(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2],xlab="Relative days from dividend payment",ylab="Daily returns",main = "Change in excess returns based on dividend distribution")
lines(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2])
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
for(count in -20:20){
selectedStocksData <- stock.Returns[stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count),]
selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"RET"),]
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStocksDataRet$"RET"))
}
plot(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2],xlab="Relative days from dividend payment",ylab="Daily returns",main = "Change in excess returns based on dividend distribution")
lines(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2])
par
?par
par(mfrow=2)
par(mfrow=c(2,1))
plot(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2],xlab="Relative days from dividend payment",ylab="Daily returns",main = "Change in excess returns based on dividend distribution")
lines(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2])
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
for(count in -20:20){
selectedStocksData <- stock.Returns[stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count),]
selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"excessRet"),]
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStocksDataRet$"excessRet"))
}
plot(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2],xlab="Relative days from dividend payment",ylab="Daily returns",main = "Change in excess returns based on dividend distribution")
lines(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2])
par(mfrow=c(1,1))
plot(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2],xlab="Relative days from dividend payment",ylab="Daily returns",main = "Change in excess returns based on dividend distribution")
lines(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2])
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
for(count in -20:20){
selectedStocksData <- stock.Returns[stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count),]
selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"excessRet"),]
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStocksDataRet$"excessRet"))
}
range(betaTable[1,])
.362^2 + .387^2 + .395^2 + .391^2 _ .38^2 + .371^2 + .26^2
0.362^2 + 0.387^2 + 0.395^2 + 0.391^2 + 0.38^2 + .371^2 + .26^2
0.362^2 + 0.387^2 + 0.395^2 + 0.391^2 + 0.38^2 + 0.371^2 + 0.36^2
sql.stockDividendEvents <- paste0("SELECT permno,distcd,divamt,dclrdt,exdt,rcrddt,paydt FROM CRSPQ.DSEDIST WHERE year(paydt) = ",date.eventYear)
stock.dividendEvents <- getData(sql.stockDividendEvents)
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
date.eventYear <- 2012
sql.stockDividendEvents <- paste0("SELECT permno,distcd,divamt,dclrdt,exdt,rcrddt,paydt FROM CRSPQ.DSEDIST WHERE year(paydt) = ",date.eventYear)
stock.dividendEvents <- getData(sql.stockDividendEvents)
#we need only dividend events
stock.dividendEvents <- stock.dividendEvents[floor(stock.dividendEvents$DISTCD/1000) %in% c(1,2,5),]
stock.dividendEvents$DCLRDT <- as.Date(stock.dividendEvents$DCLRDT)
stock.dividendEvents$EXDT <- as.Date(stock.dividendEvents$EXDT)
stock.dividendEvents$RCRDDT <- as.Date(stock.dividendEvents$RCRDDT)
stock.dividendEvents$PAYDT <- as.Date(stock.dividendEvents$PAYDT)
date.StartPeriod <- as.Date(min(stock.dividendEvents$PAYDT)) - 20
date.EndPeriod <- as.Date(max(stock.dividendEvents$PAYDT)) + 20
sql.stockReturns <- paste0("SELECT permno,date,retx,(retx-vwretx) AS excessRet FROM CRSPQ.DSF dsf INNER JOIN CRSPQ.DSP500 sp ON dsf.date = sp.caldt WHERE date between '",format(date.StartPeriod,"%d%b%Y"),"'d AND '",format(date.EndPeriod,"%d%b%Y"),"'d AND permno IN (",paste0(stock.dividendEvents$PERMNO,collapse = ","),")")
stock.Returns <- getData(sql.stockReturns)
stock.Returns$DATE <- as.Date(stock.Returns$DATE)
stock.dividendEvents$PAYDT + count
stock.dividendEvents$PAYDT + count
count <- -20
stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count)
stock.Returns$DATE %in% (stock.dividendEvents$PAYDT)
stock.dividendEvents$PAYDT
stock.Returns$DATE %in% (stock.dividendEvents$PAYDT)
stock.Returns$DATE
stock.dividendEvents$PAYDT
stock.Returns$DATE %in% (stock.dividendEvents$PAYDT)
stock.Returns$DATE %in% (stock.dividendEvents$PAYDT+count)
stock.Returns$DATE %in% (stock.dividendEvents$PAYDT)
which(stock.Returns$DATE %in% (stock.dividendEvents$PAYDT))
sapply(stock.Returns$DATE, function(x){x %in% stock.dividendEvents$PAYDT})
which(stock.Returns$DATE %in% (stock.dividendEvents$PAYDT))
dividendIndices <- which(stock.Returns$DATE %in% (stock.dividendEvents$PAYDT))
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
dividendIndices <- which(stock.Returns$DATE %in% (stock.dividendEvents$PAYDT))
dividendIndices <- which(stock.Returns$DATE %in% (stock.dividendEvents$PAYDT))
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
dividendIndicesfor(count in -20:20){
#selectedStocksData <- stock.Returns[stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count),]
selectedStocksData <- stock.Returns[dividendIndices-count,]
selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"excessRet"),]
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStocksDataRet$"excessRet"))
}
dividendIndices <- which(stock.Returns$DATE %in% (stock.dividendEvents$PAYDT))
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
for(count in -20:20){
#selectedStocksData <- stock.Returns[stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count),]
selectedStocksData <- stock.Returns[dividendIndices-count,]
selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"excessRet"),]
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStocksDataRet$"excessRet"))
}
dividendIndices <- which(stock.Returns$DATE %in% (stock.dividendEvents$PAYDT))
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
for(count in -20:20){
#selectedStocksData <- stock.Returns[stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count),]
selectedStocksData <- stock.Returns[dividendIndices+count,]
selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"excessRet"),]
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStocksDataRet$"excessRet"))
}
plot(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2],xlab="Relative days from dividend payment",ylab="Daily returns",main = "Change in excess returns based on dividend distribution")
lines(stock.meanEventBasedReturns[,1],stock.meanEventBasedReturns[,2])
stock.dividendEvents$PAYDT
dim(stock.dividendEvents$PAYDT)
length(stock.dividendEvents$PAYDT)
dividendIndices <- which(stock.Returns$DATE %in% stock.dividendEvents$PAYDT)
length(dividendIndices)
dividendIndices <- which(stock.Returns$DATE %in% stock.dividendEvents$PAYDT)
length(dividendIndices)
length(stock.Returns$DATE)
unique(stock.dividendEvents$PAYDT)
stock.Returns$DATE %in% stock.dividendEvents$PAYDT
dividendIndices <- which(stock.Returns$DATE %in% stock.dividendEvents$PAYDT)
dividendIndices
count(dividendIndices)
length(dividendIndices)
length(stock.Returns$DATE %in% stock.dividendEvents$PAYDT)
length(stock.Returns$DATE)
length(stock.Returns$DATE %in% stock.dividendEvents$PAYDT)
length(stock.Returns$DATE %in% unique(stock.dividendEvents$PAYDT))
unique(stock.dividendEvents$PAYDT)
which(stock.Returns$DATE %in% unique(stock.dividendEvents$PAYDT))
dividendIndices <- which(stock.Returns$DATE %in% unique(stock.dividendEvents$PAYDT))
length(dividendIndices)
length(stock.dividendEvents$PAYDT)
stock.Returns$DATE %in% stock.dividendEvents$PAYDT
stock.Returns$DATE
stock.dividendEvents$PAYDT + count
?sapply
lapply(stock.dividendEvents,print(stock.dividendEvents$PERMNO))
lapply(stock.dividendEvents,function(x){print(x)})
lapply(stock.dividendEvents,function(x){print(x$PERMNO)})
lapply(stock.dividendEvents,function(x){print(x[1])})
colnames(stock.dividendEvents)
lapply(colnames(stock.dividendEvents),function(x){print(x$PERMNO)})
lapply(colnames(stock.dividendEvents),function(x){print(x)})
library(reshape2)
colnames(stock.Returns)
stockReturnsMat <- dcast(stock.Returns,DATE~PERMNO,value.var="retx")
stockReturnsMat <- dcast(stock.Returns,DATE~PERMNO,value.var="excessRet")
stockReturnsMat
head(stockReturnsMat)
colnames(stockReturnsMat)
row.names(stock.ReturnsMat)
row.names(stockReturnsMat)
colnames(stock.Returns)
stockReturnsMat <- dcast(stock.Returns,DATE~PERMNO,value.var="excessRet")
colnames(stockReturnsMat)
colnames(stock.dividendEvents)
lapply(colnames(stock.dividendEvents),function(x){print x[1]})
lapply(colnames(stock.dividendEvents),function(x){print(x[1])})
lapply(stock.dividendEvents,function(x){print(x[1])})
stock.dividendEvents
apply(stock.dividendEvents,1,function(x){print(x[1])})
permnos <- apply(stock.dividendEvents,1,function(x){x[1]})
length(permnos)
colnames(stock.dividendEvents)
count <- -20
count <- -20
x <- stock.dividendEvents[1,]
x
permNo <- x[1]
permNo
payDate
payDate <- x[7]
payDate
payDatePos <- which(selectedStocksDataRet["DATE" == payDate])
payDatePos <- which(selectedStocksDataRet[selectedStocksDataRet$DATE == payDate])
selectedStocksDataRet$DATE
payDate
selectedStocksDataRet$DATE
payDate
payDatePos <- which(selectedStocksDataRet$DATE == payDate)
payDatePos <- which(selectedStocksDataRet$DATE == payDate)
payDate
payDate[1,1]
payDatePos <- which(selectedStocksDataRet$DATE == payDate[1,1])
payDatePos
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
payDatePos
payDate[1,1]
payDatePos + count
permNo
stockReturnsMat[payDatePos + count,permNo]
class(stockReturnsMat)
stockReturnsMat$permno
permno
permNo
stockReturnsMat$permNo
permNo
permno[1,1]
permNo[1,1]
stockReturnsMat$permNo[1,1]
stockReturnsMat$`10001`
stockReturnsMat$10001
columnName <- paste0("'",x[1],"'")
columnName
payDate <- x[7]
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
stockReturnsMat$columnName
stockReturnsMat[payDatePos + count,columnName]
stockReturnsMat[payDatePos + count,]
stockReturnsMat[payDatePos + count,x[1]]
stockReturnsMat[payDatePos + count,]$columnName
permNo <- x[1]
permNo
payDate <- x[7]
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
stockReturnsMat[payDatePos + count,permNo[1,1]]
permNo[1,1]
stockReturnsMat[payDatePos + count,10001]
stockReturnsMat[payDatePos + count,]
colnames(stockReturnsMat[payDatePos + count,])
stockReturnsMat[,"10001"]
payDatePos + count
permNo[1,1]
as.character(permNo[1,1])
colnames(stockReturnsMat[payDatePos + count,as.character(permNo[1,1])])
colnames(stockReturnsMat[payDatePos + count,"10001"])
stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
count <- -20
selectedStocksDataRet <- apply(stock.dividendEvents,1,function(x)
{
permNo <- x[1]
payDate <- x[7]
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
})
selectedStocksDataRet <- apply(stock.dividendEvents,1,function(x)
{
permNo <- x[1]
print(permNo[1,1])
#payDate <- x[7]
#payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
#stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
})
selectedStocksDataRet <- apply(stock.dividendEvents,1,function(x)
{
permNo <- x[1]
permNo[1,1]
#payDate <- x[7]
#payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
#stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
})
length(stock.dividendEvents)
dim(stock.dividendEvents)
dim(stock.dividendEvents)[1]
for(i in 1:dim(stock.dividendEvents)[1])
{
x <- stock.dividendEvents[i]
permNo <- x[1]
permNo[1,1]
#payDate <- x[7]
#payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
#stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
})
dim(stock.dividendEvents)[1]
1:dim(stock.dividendEvents)[1]
for(i in 1:dim(stock.dividendEvents)[1])
{
x <- stock.dividendEvents[i]
permNo <- x[1]
permNo
#payDate <- x[7]
#payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
#stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
})
for(i in 1:dim(stock.dividendEvents)[1])
{
x <- stock.dividendEvents[i]
permNo <- x[1]
permNo
#payDate <- x[7]
#payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
#stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
}
for(i in 1:dim(stock.dividendEvents)[1])
{
x <- stock.dividendEvents[i,]
permNo <- x[1]
permNo
#payDate <- x[7]
#payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
#stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
}
for(i in 1:dim(stock.dividendEvents)[1])
{
x <- stock.dividendEvents[i,]
permNo <- x[1]
print(permNo)
#payDate <- x[7]
#payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
#stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
}
for(i in 1:dim(stock.dividendEvents)[1])
{
x <- stock.dividendEvents[i,]
permNo <- x[1]
payDate <- x[7]
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
}
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
for(count in -20:20){
#selectedStocksData <- stock.Returns[stock.Returns$DATE %in% (stock.dividendEvents$PAYDT + count),]
#selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"excessRet"),]
#selectedStocksDataRet <- apply(stock.dividendEvents,1,function(x)
for(i in 1:dim(stock.dividendEvents)[1])
{
x <- stock.dividendEvents[i,]
permNo <- x[1]
payDate <- x[7]
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
}
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStocksDataRet$"excessRet"))
}
stock.meanEventBasedReturns
1:dim(stock.dividendEvents)[1]
x <- stock.dividendEvents[i,]
x
permNo <- x[1]
permNo
payDate <- x[7]
payDate
stockReturnsMat$DATE
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
payDatePos
payDatePos + count
stock.meanEventBasedReturns <- matrix(nrow = 41,ncol=2)
for(count in -20:20){
#selectedStocksData <- stock.Returns[stock.Returns$DATE %in%   (stock.dividendEvents$PAYDT + count),]
#selectedStocksDataRet <- selectedStocksData[!is.na(selectedStocksData$"excessRet"),]
#selectedStocksDataRet <- apply(stock.dividendEvents,1,function(x)
selectedStocksDataRet <- c()
for(i in 1:dim(stock.dividendEvents)[1])
{
x <- stock.dividendEvents[i,]
permNo <- x[1]
payDate <- x[7]
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
selectedStocksDataRet[i] <- stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
}
stock.meanEventBasedReturns[count+21,] <- c(count,mean(selectedStockDataRet$"excessRet"[is.na(selectedStockDataRet$"excessRet")]))
}
stockReturnsMat[payDatePos + count,as.character(permNo[1,1])]
x <- stock.dividendEvents[i,]
permNo <- x[1]
payDate <- x[7]
payDatePos <- which(stockReturnsMat$DATE == payDate[1,1])
payDatePos
payDate
payDate[1,1]
stockReturnsMat$DATE == payDate[1,1]
payDate[1,1]
stockReturnsMat[stockReturnsMat$DATE == "2012-09-01",]
stockReturnsMat <- dcast(stock.Returns,DATE~PERMNO,value.var="excessRet")
stockReturnsMat[stockReturnsMat$DATE == "2012-09-01",]
stock.Returns[stock.Returns$DATE == "2012-09-01",]
stock.Returns <- getData(sql.stockReturns)
stock.Returns$DATE <- as.Date(stock.Returns$DATE)
head(stock.Returns)
stock.Returns
stock.Returns <- getData(sql.stockReturns)
sql.stockReturns <- paste0("SELECT permno,date,retx,(retx-vwretx) AS excessRet FROM CRSPQ.DSF dsf INNER JOIN CRSPQ.DSP500 sp ON dsf.date = sp.caldt WHERE date between '",format(date.StartPeriod,"%d%b%Y"),"'d AND '",format(date.EndPeriod,"%d%b%Y"),"'d AND permno IN (",paste0(stock.dividendEvents$PERMNO,collapse = ","),")")
stock.Returns <- getData(sql.stockReturns)
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql.stockdata <- "SELECT CUSIP, PERMNO, (PRC*SHROUT) AS MARKETCAP, RET FROM CRSPQ.DSF"
sql.stocknames <- "SELECT PERMNO, NAMEDT, NAMEENDT, CUSIP,TICKER FROM CRSPQ.DSENAMES"
stock.data <- getData(sql.stockdata)
# Function to get data #
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql.stockdata <- "SELECT CUSIP, PERMNO, (PRC*SHROUT) AS MARKETCAP, RET FROM CRSPQ.DSF"
sql.stocknames <- "SELECT PERMNO, NAMEDT, NAMEENDT, CUSIP,TICKER FROM CRSPQ.DSENAMES"
stock.data <- getData(sql.stockdata)
sql.stockdata <- "SELECT CUSIP, PERMNO, (PRC*SHROUT) AS MARKETCAP, RET FROM CRSPQ.ASF"
stock.data.annual <- getData(sql.stockdata)
colnames(stock.data)
# Function to get data #
getData <- function(sql, n = -1){
#setup connection
res <- dbSendQuery(wrds, sql)
dbHasCompleted(res)
#perform fetch
returnData <- fetch(res, n)
#clear memory
dbClearResult(res)
return(returnData)
}
sql.stockdata <- "SELECT date, CUSIP, PERMNO, (PRC*SHROUT) AS MARKETCAP, RET FROM CRSPQ.MSF ORDER BY PERMNO,date"
stock.data <- getData(sql.stockdata)
sql.stocknames <- "SELECT PERMNO, NAMEDT, NAMEENDT, CUSIP,TICKER FROM CRSPQ.DSENAMES"
stock.names <- getData(sql.stocknames)
setwd("C:/_UCLA/237A_CorporateFinance/Assignments/Assignment3")
write.xlsx(stock.data, paste(getwd(),"StockData.xlsx",sep = "/"))
library(xlsx)
write.xlsx(stock.data, paste(getwd(),"StockData.xlsx",sep = "/"))
write.table(stock.data, paste(getwd(),"StockData.xlsx",sep = "/"),sep = ",")
head(stock.data)
stock.annualReturns <- matrix(nrow = 5)
allPermnos <- unique(stock.data$PERMNO)
